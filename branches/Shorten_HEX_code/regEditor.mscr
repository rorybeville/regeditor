# Parameters:
# 1 - string: name of the registry key to edit
# 2 - string: name of the application that uses the registry information (for display purpose and name of description file)
# 3 - boolean (optional, default is FALSE): if 0 or FALSE, do not prompt for change confirmation. If FALSE, the cancel button will just cancel the change
# 4 - boolean (optional, default is FALSE): if 1 or TRUE, show dword values in dword:00000000 format

regpath = argv[1]
If(regpath eq "")
  bigmessage("This program is run by a link in this form:^NL^CallScript(""regEditor.mscr"",^NL^""registry path to edit"",^NL^""Application name"",^NL^""confirm changes"")","ERROR")
  exit
EndIf

root = Substr(regpath, 0, Find(regpath, "\" )-1)
regpath = Substr(regpath,Find(regpath, "\" )+1)
j=1
regpathbase[j] = regpath

If (NOT RegKeyExists(root, regpathbase[j]))
	Message("Registry location " & root \ regpathbase[j] & " does not exist", "ERROR")
	Exit # checks for file and exits script if it does not
EndIf

appName = argv[2]

descFileName = appName & ".desc"
If (FilePath(descFileName) eq "")
	descFileName = SystemPath("ScriptPath") \ descFileName
EndIf

promptForConfirmation = (argv[3] eq "")?FALSE:argv[3]
dwordformat = argv[4]
Call("iniChoiceFormat")

SetMessageFont(10)
StatusType(ST_MESSAGE, 0)
StatusMessage("Loading " & regpathbase[j] & " sections")

Call("ChoiceList")

While(choosenSection > 0)
	If (MaxIndex(regarray) > 0)
		choosenSection = Choice(appName & " settings", "Please choose a Key or value setting:", 1,0, regarray)
		If (choosenSection = 1)
			j-=1
			If(j > 0)
				Call("ChoiceList")
			Else
				Exit
			EndIf
		ElseIf (choosenSection > 0)
			If(regpathbase[j-1] eq "")
				If(RegKeyExists( root, regpathbase[j] \ Replace(Replace(regarray[choosenSection], "<",""),">","")))
					j+=1
					regpathbase[j] = regpathbase[j-1] \ Replace(Replace(regarray[choosenSection], "<",""),">","")
					Call("ChoiceList")
				Else
					regkey[j] = regarray[choosenSection]
					Call("regList")
				EndIf
			Else
				If(RegKeyExists( root, regpathbase[j] \ Replace(Replace(regarray[choosenSection], "<",""),">","")))
					j+=1
					regpathbase[j] = regpathbase[j-1] \ Replace(Replace(regarray[choosenSection], "<",""),">","")
					Call("ChoiceList")
				Else
					regkey[j] = regarray[choosenSection]
					Call("regList")
				EndIf
			EndIf
		Else
			Exit
 		EndIf
 	Else
		Break
	EndIf
EndWhile

Sub iniChoiceFormat
	If (FileExists ( SystemPath("ScriptPath") \ "regEditor.cfg" ))
		choicesize = IniRead( SystemPath("ScriptPath") \ "regEditor.cfg", "Settings", "choicesize" )
		choicetext = IniRead( SystemPath("ScriptPath") \ "regEditor.cfg", "Settings", "choicetext" )
		choicefont = IniRead( SystemPath("ScriptPath") \ "regEditor.cfg", "Settings", "choicefont" )
	EndIf
	choicesize = (choicesize eq "")?20:choicesize
	choicetext = (choicetext eq "")?12:choicetext
	choicefont = (choicefont eq "")?"ARIAL":choicefont
	SetChoiceEntryFormat(choicesize, choicetext, choicefont)
EndSub

sub ChoiceList
	Global(j, root, regkey, regpathbase, regarray, choosenSection)
	choosenSection = 1
	clear(regarray)
	i=1
	If(j = 1)
		regarray[i] = "<exit>"
	Else
		regarray[i] = "<..>"
	EndIf
	ForEach regitem in regSubkeys ( root, regpathbase[j] )
		i+=1
		regarray[i] = "<" & regitem & ">"
	EndForEach
	i+=1
	regarray[i] = "(Default)"
	ForEach regvalue, regdata in regValues ( root, regpathbase[j] )
		i+=1
		regarray[i] = regvalue
	EndForEach
	If(i eq 1)
	Message("Registry location " & root \ regpathbase[j] & " is empty", "ERROR")
	Exit # checks for file and exits script if it is empty
	EndIf
	StatusClear()
EndSub

Sub regList
	Global(dwordformat, xtypename, j, root, regkey, regpath, regpathbase, promptForConfirmation, newValue, descFileName)
	If(regkey[j] eq "(Default)")
		existValue = RegReadExt(root, regpathbase[j], "")
		existValue = (existValue eq "-")?"":existValue
	Else
		existValue = RegReadExt(root, regpathbase[j], regkey[j])
	EndIf
	multi = 0
	xtypename = ""
	If(Find(existValue, "hex(7):") or Find(existValue, "hex(2):"))
		xtypename = SubStr(existValue,1,7)
		xtypename = (xtypename eq "hex(2):")?"ExpandableString":"MultiString"
	# Convert hex characters to ASCII
		existValue=Replace( existValue, "hex(2):", "," )
		existValue=Replace( existValue, "hex(7):", "," )
		while(1)
			If(SubStr(existValue, Length(existValue)-5) eq ",00,00")
				existValue = SubStr(existValue, 1, Length(existValue)-6)
				If(existValue eq "" OR existValue eq ",00,00")
					existValue = ""
					Break
				EndIf
			Else
				Break
			EndIf
		EndWhile
		If(xtypename eq "MultiString")
		multi = 1
			existValue=Replace( existValue, ",00,00,00", ",00^NL^" )
		EndIf
		If(existValue ne "")
			ForEach xhex, xtext in inikeys ( "Hex2Text", "Convert" )
			existValue=Replace( existValue, ToLower(xhex), xtext )
			EndForEach
		EndIf
	ElseIf(Find(existValue, "hex:"))
		xtypename = "Binary"
		existValue=Replace( existValue, "hex:", "" )
	ElseIf(Find(existValue, "dword"))
		xtypename = "Dword"
		If(NOT dwordformat)
			xtypename = "Decimal"
			existValue=Replace( existValue, "dword:", "" )
			existValue=HexToNumber(existValue)
		EndIf
	ElseIf(SubStr(existValue,1,1) eq """")
		xtypename = "String"
		existValue = SubStr(SubStr(existValue,1, Length(existValue)-1),2)
		existValue = Replace(existValue,"\\","\")
		existValue = Replace(existValue,"\""", """")
	Else # May be undefined
		ChoiceDefault("Unknown value type", "Select the type of value. Cancel to skip.", 1, 0, "String", "Decimal", "Dword", "Binary", "MultiString", "ExpandableString")
		Case(1)
			xtypename = "String"
		Case(2)
			xtypename = "Decimal"
		Case(3)
			xtypename = "Dword"
		Case(4)
			xtypename = "Binary"
		Case(5)
			xtypename = "MultiString"
		Case(6)
			xtypename = "ExpandableString"
		Default
			xtypename = "unknown"
		EndChoice
	EndIf
	If(FileExists(descFileName))
		ForEach desckey, descvalue in iniKeys(descFileName, Substr(regpathbase[j], ReverseFind(regpathbase[j], "\" )+1))
			If(desckey eq regkey[j])
				commentList = descvalue
				Break
			EndIf
		EndForEach
	EndIf
	If(xtypename ne "unknown")
		newValue = Input(commentList & "^NL^" & "^NL^" & regkey[j] & " = " & xtypename , "Enter new value", 0, multi, existValue)
	EndIf
	If (promptForConfirmation)
		confirmation = Question("Set '" & regkey[j] &"' to new value?^NL^" & newValue, "Confirmation required!")
	ElseIf (newValue eq "")
		confirmation = FALSE
	Else
		confirmation = TRUE
	EndIf
	If (confirmation)
		Call("iniWriteNewValue")
	EndIf
EndSub

Sub iniWriteNewValue
	Global(dwordformat, xtypename, j, root, regkey, regpathbase, newValue)
	regkey[j] = (regkey[j] eq "(Default)")?"":regkey[j]
	If(xtypename eq "ExpandableString")
	# Convert ASCII characters to hex
		ForEach variable in charsOf ( newValue )
			ForEach xhex, xtext in inikeys ( "Hex2Text", "Convert" )
				If(variable eq xtext)
					variable = xhex
				EndIf
			EndForEach
			newerValue = newerValue & variable
		EndForEach
		newerValue = "hex(2):" & SubStr(newerValue, 2)
		RegWriteExt( root, regpathbase[j], regkey[j], newerValue )
	ElseIf(xtypename eq "MultiString")
		newValuearray = Split(newValue, "^NL^", FALSE)
		RegWriteMultiString(root, regpathbase[j], regkey[j], newValuearray )
	ElseIf(xtypename eq "Binary")
		newValue=Replace( newValue, ",", "" )
		RegWriteBinary( root, regpathbase[j], regkey[j], newValue )
	ElseIf(xtypename eq "Dword")
		RegWriteExt( root, regpathbase[j], regkey[j], newValue )
	ElseIf(xtypename eq "Decimal")
		RegWriteDWord( root, regpathbase[j], regkey[j], newValue )
	ElseIf(xtypename eq "String")
		RegWriteString( root, regpathbase[j], regkey[j], newValue )
	Else # May be undefined
	EndIf
EndSub
